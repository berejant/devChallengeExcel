// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CellSerializer is an autogenerated mock type for the CellSerializer type
type CellSerializer struct {
	mock.Mock
}

// Marshal provides a mock function with given fields: key, value
func (_m *CellSerializer) Marshal(key string, value string) []byte {
	ret := _m.Called(key, value)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Unmarshal provides a mock function with given fields: _a0
func (_m *CellSerializer) Unmarshal(_a0 []byte) (string, string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func([]byte) (string, string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewCellSerializer interface {
	mock.TestingT
	Cleanup(func())
}

// NewCellSerializer creates a new instance of CellSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCellSerializer(t mockConstructorTestingTNewCellSerializer) *CellSerializer {
	mock := &CellSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
