// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	contracts "devChallengeExcel/contracts"

	mock "github.com/stretchr/testify/mock"
)

// SheetRepository is an autogenerated mock type for the SheetRepository type
type SheetRepository struct {
	mock.Mock
}

// GetCell provides a mock function with given fields: sheetId, cellId
func (_m *SheetRepository) GetCell(sheetId string, cellId string) (*contracts.Cell, error) {
	ret := _m.Called(sheetId, cellId)

	var r0 *contracts.Cell
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*contracts.Cell, error)); ok {
		return rf(sheetId, cellId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *contracts.Cell); ok {
		r0 = rf(sheetId, cellId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contracts.Cell)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(sheetId, cellId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCellList provides a mock function with given fields: sheetId
func (_m *SheetRepository) GetCellList(sheetId string) (*contracts.CellList, error) {
	ret := _m.Called(sheetId)

	var r0 *contracts.CellList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*contracts.CellList, error)); ok {
		return rf(sheetId)
	}
	if rf, ok := ret.Get(0).(func(string) *contracts.CellList); ok {
		r0 = rf(sheetId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contracts.CellList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sheetId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCell provides a mock function with given fields: sheetId, cellId, value
func (_m *SheetRepository) SetCell(sheetId string, cellId string, value string) (*contracts.Cell, error) {
	ret := _m.Called(sheetId, cellId, value)

	var r0 *contracts.Cell
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*contracts.Cell, error)); ok {
		return rf(sheetId, cellId, value)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *contracts.Cell); ok {
		r0 = rf(sheetId, cellId, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contracts.Cell)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(sheetId, cellId, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSheetRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSheetRepository creates a new instance of SheetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSheetRepository(t mockConstructorTestingTNewSheetRepository) *SheetRepository {
	mock := &SheetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
