// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	contracts "devChallengeExcel/contracts"

	mock "github.com/stretchr/testify/mock"
)

// ExpressionExecutor is an autogenerated mock type for the ExpressionExecutor type
type ExpressionExecutor struct {
	mock.Mock
}

// Evaluate provides a mock function with given fields: expression, sheet
func (_m *ExpressionExecutor) Evaluate(expression string, sheet contracts.CellValuesGetter) (string, error) {
	ret := _m.Called(expression, sheet)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, contracts.CellValuesGetter) (string, error)); ok {
		return rf(expression, sheet)
	}
	if rf, ok := ret.Get(0).(func(string, contracts.CellValuesGetter) string); ok {
		r0 = rf(expression, sheet)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, contracts.CellValuesGetter) error); ok {
		r1 = rf(expression, sheet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractDependingOnList provides a mock function with given fields: expression
func (_m *ExpressionExecutor) ExtractDependingOnList(expression string) []string {
	ret := _m.Called(expression)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ExtractExternalRefs provides a mock function with given fields: expression
func (_m *ExpressionExecutor) ExtractExternalRefs(expression string) []string {
	ret := _m.Called(expression)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(expression)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MultiEvaluate provides a mock function with given fields: expressions, sheet, breakOnError
func (_m *ExpressionExecutor) MultiEvaluate(expressions contracts.ExpressionsMap, sheet contracts.CellValuesGetter, breakOnError bool) error {
	ret := _m.Called(expressions, sheet, breakOnError)

	var r0 error
	if rf, ok := ret.Get(0).(func(contracts.ExpressionsMap, contracts.CellValuesGetter, bool) error); ok {
		r0 = rf(expressions, sheet, breakOnError)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewExpressionExecutor interface {
	mock.TestingT
	Cleanup(func())
}

// NewExpressionExecutor creates a new instance of ExpressionExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExpressionExecutor(t mockConstructorTestingTNewExpressionExecutor) *ExpressionExecutor {
	mock := &ExpressionExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
